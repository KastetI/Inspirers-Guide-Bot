import asyncio
import aiohttp
import logging
import json 
import sys
from aiogram import Bot, Dispatcher, html, types
from aiogram.client.default import DefaultBotProperties

from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.types.callback_query import CallbackQuery
from aiogram import F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

TOKEN = "6426210653:AAEli4fk64tBTTF6NyX4c3qAWkBA--gDPVs"
dp = Dispatcher()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

keyboard_markup = types.ReplyKeyboardMarkup(keyboard=[
    [types.KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ –ª–µ–∫—Ü–∏–π"), types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—á—Ç–æ–π!")], 
    [types.KeyboardButton(text="–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"), types.KeyboardButton(text="–ú–∏–Ω–∏-–∏–≥—Ä–∞")]
])

class functions(StatesGroup):
    catalog = State()
    event = State()
    share_dream = State()
    game = State()

class Lecture():
    def __init__(self, id:int, lecture_name:str, video_path:str, lecturer:str=None, lecturer_about:str=None, ) -> None:
        self.lecture_name = lecture_name
        self.video_path = video_path
        self.lecturer = lecturer
        self.lecturer_about = lecturer_about
        
event = {"date" : "20 –∏—é–Ω—è 2024–≥",
    "name" : "–í–¥–æ—Ö–Ω–æ–≤–ª—è–µ–º –≤ –õ–∏–ø–µ—Ü–∫–µ",
    "place" : "–≥–æ—Ä–æ–¥ –õ–∏–ø–µ—Ü–∫", 
    "about" : "–°–±–æ—Ä –í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Å–µ —Ç–∞–∫ –∂–¥–∞–ª–∏! –° —Ñ–æ—Ç–æ–∑–æ–Ω–æ–π, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏",
    "photo_path" : "C:\\Users\\Main\\Desktop\\Coding\\inspirersGuideBot\\Post.jpg" 
    }

@dp.message(Command(commands="start"), StateFilter(None))
async def start(msg: Message):
    await msg.answer(
f"""–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è \"–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–∏\". 
–£ –º–µ–Ω—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ª–µ–∫—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤!""", 
    reply_markup=keyboard_markup)


@dp.message(StateFilter(None))
async def choose(msg: Message, state: FSMContext):
    if msg.text.lower() == "–∫–∞—Ç–∞–ª–æ–≥ –ª–µ–∫—Ü–∏–π":
        await state.set_state(functions.catalog)
        catalog = await load_catalog()
        buttons = [[types.InlineKeyboardButton(text=lec.lecture_name, callback_data=lec.video_path)] for lec in catalog]
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        text ="üé• –ó–∞–ø–∏—Å–∞–ª–∏ –¥–ª—è –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ–∫—Ü–∏–π:\n"
        for i, lecture in enumerate(catalog):
            text += f" {i+1}: ¬´{lecture.lecture_name}¬ª. {lecture.lecturer} ‚Äî {lecture.lecturer_about}.\n"
        f = types.FSInputFile("Record.png")
        await msg.answer_photo(f, text, reply_markup=markup)
        await state.set_state(None)
        
    if msg.text.lower() in ("–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—á—Ç–æ–π!", "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—á—Ç–æ–π") :
        pass
    if msg.text.lower() == "–±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        event = await load_event()
        photo = types.FSInputFile(event["photo_path"])
        text =f"üí´{event['name']}\nüìå–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event['place']}\nüóì–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event['date']}\n\n{event['about']}"
        await msg.answer_photo(photo=photo, caption=text)
    if msg.text.lower() in ("–º–∏–Ω–∏-–∏–≥—Ä–∞", "–º–∏–Ω–∏ –∏–≥—Ä–∞"):
        pass

@dp.callback_query()
async def callback(call: CallbackQuery):
    path = call.data
    video = types.FSInputFile(path)
    await call.message.answer_video(video, caption="–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
    
async def load_event():
    f = open("event.json", "r")
    json_event = f.read()
    f.close()
    event = json.loads(json_event)
    return event
    

async def load_catalog():
    catalog = [
    Lecture(0, "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç–∞–ø!", "C:\\Users\\Main\\Downloads\\Lecture1.MP4", "–û–ª–µ–≥ –¢–∞—Ä–∞—Å–æ–≤", "–°–æ–∑–¥–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞ ¬´–ï–ì–≠–ü–†–û–†–´–í¬ª"),
    Lecture(1, "–û –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–µ", "C:\\Users\\Main\\Downloads\\Lecture2.MP4", "–†–∞—Ç–∏–±–æ—Ä –ü–æ–ø–æ–≤", "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞"),
    Lecture(2, "–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–∏", "C:\\Users\\Main\\Downloads\\Lecture3.MP4", "–ê–ª–µ–∫—Å–µ–π –ß—É–º–∞–∫–æ–≤", "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è ¬´–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª–∏¬ª")
    ]
    return catalog 


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)
    asyncio.run(main())